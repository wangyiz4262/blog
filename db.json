{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1},{"_id":"source/robots.txt","path":"robots.txt","modified":1},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1},{"_id":"source/img/2017/03/promise.png","path":"img/2017/03/promise.png","modified":1},{"_id":"source/img/2015/10/tcp-3-way-handshake.jpg","path":"img/2015/10/tcp-3-way-handshake.jpg","modified":1},{"_id":"source/img/2015/10/os-linux-shell.png","path":"img/2015/10/os-linux-shell.png","modified":1},{"_id":"source/img/2015/10/internet.jpg","path":"img/2015/10/internet.jpg","modified":1},{"_id":"source/img/2015/10/html-white-space-on-the-right-side-of-page.png","path":"img/2015/10/html-white-space-on-the-right-side-of-page.png","modified":1},{"_id":"source/img/2015/10/html-position-absolute-z-index.png","path":"img/2015/10/html-position-absolute-z-index.png","modified":1},{"_id":"source/img/2015/10/html-extra-long-line.png","path":"img/2015/10/html-extra-long-line.png","modified":1},{"_id":"source/img/2015/10/html-anchor-tag.png","path":"img/2015/10/html-anchor-tag.png","modified":1},{"_id":"source/img/2015/09/blog-theme-landscape.jpg","path":"img/2015/09/blog-theme-landscape.jpg","modified":1},{"_id":"source/img/2015/09/blog-ssh-to-github.png","path":"img/2015/09/blog-ssh-to-github.png","modified":1},{"_id":"source/img/2015/09/blog-ssh-key.png","path":"img/2015/09/blog-ssh-key.png","modified":1},{"_id":"source/img/2015/09/blog-hexo.png","path":"img/2015/09/blog-hexo.png","modified":1},{"_id":"source/img/2015/09/blog-github-repo-name.png","path":"img/2015/09/blog-github-repo-name.png","modified":1},{"_id":"source/img/2015/09/blog-github-repo-create.png","path":"img/2015/09/blog-github-repo-create.png","modified":1},{"_id":"source/img/2015/09/blog-github-create-repo-button.png","path":"img/2015/09/blog-github-create-repo-button.png","modified":1},{"_id":"source/img/2015/09/blog-dnspod.jpg","path":"img/2015/09/blog-dnspod.jpg","modified":1},{"_id":"source/img/2015/03/iot-debounce_switch.jpg","path":"img/2015/03/iot-debounce_switch.jpg","modified":1},{"_id":"source/img/2015/03/iot-circut_switch.png","path":"img/2015/03/iot-circut_switch.png","modified":1},{"_id":"source/img/2015/02/leetcode-tree.jpg","path":"img/2015/02/leetcode-tree.jpg","modified":1},{"_id":"source/img/2015/02/leetcode-string.png","path":"img/2015/02/leetcode-string.png","modified":1},{"_id":"source/img/2015/02/leetcode-stack.png","path":"img/2015/02/leetcode-stack.png","modified":1},{"_id":"source/img/2015/01/leetcode-array.jpg","path":"img/2015/01/leetcode-array.jpg","modified":1},{"_id":"themes/hueman/source/scrollLoading/style.css","path":"scrollLoading/style.css","modified":1},{"_id":"themes/hueman/source/scrollLoading/main.js","path":"scrollLoading/main.js","modified":1},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","path":"scrollLoading/jquery.scrollLoading.js","modified":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","path":"scrollLoading/images/preloader@2x.gif","modified":1},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","path":"scrollLoading/images/preloader.gif","modified":1},{"_id":"themes/hueman/source/js/script.js","path":"js/script.js","modified":1},{"_id":"themes/hueman/source/js/html-patch.js","path":"js/html-patch.js","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":1},{"_id":"themes/hueman/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":1},{"_id":"themes/hueman/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/hueman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/hueman/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/hueman/source/css/images/thumb-default.png","path":"css/images/thumb-default.png","modified":1},{"_id":"themes/hueman/source/css/images/thumb-default-small_bak.png","path":"css/images/thumb-default-small_bak.png","modified":1},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","path":"css/images/thumb-default-small.png","modified":1},{"_id":"themes/hueman/source/css/images/s-left.png","path":"css/images/s-left.png","modified":1},{"_id":"themes/hueman/source/css/images/opacity-10.png","path":"css/images/opacity-10.png","modified":1},{"_id":"themes/hueman/source/css/images/logo-header.png","path":"css/images/logo-header.png","modified":1}],"Cache":[{"_id":"source/CNAME","shasum":"e5f736e8cd0b90997e226d23ecfb4e778e246753","modified":1488603291000},{"_id":"source/_posts/2015/01/Array-partition-with-two-pointers.md","shasum":"86f670bf9d14a0a7f7a6bea5b4cc0cc5107c7c64","modified":1488603604000},{"_id":"source/_posts/2015/01/Breadth-First-Traversal-with-Queue.md","shasum":"3a68b56fe32ee3b6d4d2c6d92aa2cb5fb89f0376","modified":1488603291000},{"_id":"source/_posts/2015/02/Corner-cases-for-binary-trees.md","shasum":"c7d8590515e6424182617b66663e0d3b386551d7","modified":1488603624000},{"_id":"source/_posts/2015/02/DFS-in-Binary-Tree.md","shasum":"350b9a7082d911fda75294d370d41e744eabb4e6","modified":1488603637000},{"_id":"source/_posts/2015/02/Recursion-and-Stack-memory.md","shasum":"c3a981be6532762003aa4d6c3992a069774ee04b","modified":1488603651000},{"_id":"source/_posts/2015/02/Run-Length-Encoding-algorithm-for-Strings.md","shasum":"ac606b28ec00699fc15b6ed930be9774ccbc24f5","modified":1488603659000},{"_id":"source/_posts/2015/03/Interfacing-an-LED-and-debouncing-switch.md","shasum":"a2238c9bc3366d33e309d035a4faa5087536479c","modified":1488603686000},{"_id":"source/_posts/2015/09/Build-personal-blog-with-Hexo-Part-1.md","shasum":"dcd5caf3c1fedaa9aadd221cff042f56dfef60b2","modified":1488603704000},{"_id":"source/_posts/2015/09/Build-personal-blog-with-Hexo-Part-2.md","shasum":"318d5136d23332ab8e0211c6380ddcc6f3f6c729","modified":1488603715000},{"_id":"source/_posts/2015/10/About-eval-in-Shell.md","shasum":"4becc95e352e7a0c0df66a25b9c26bfb8e968dd6","modified":1488603726000},{"_id":"source/_posts/2015/10/Create-a-2-dimensional-Array-in-JavaScript.md","shasum":"84d0cd42c9a231dc65d4842ef1238f81d6d90378","modified":1488603291000},{"_id":"source/_posts/2015/10/Expression-vs-Statement.md","shasum":"e641958ccd9cccfc3ec3810af88a5944acf499f6","modified":1488603291000},{"_id":"source/_posts/2015/10/Extra-white-space-on-my-page.md","shasum":"da835047704e862e83ff3d0fea88f57abb1f84fd","modified":1488603742000},{"_id":"source/_posts/2015/10/TCP-3-way-Handshake.md","shasum":"aa068504a5fa3af1ab6bf590f44311ec5e28163a","modified":1488603752000},{"_id":"source/_posts/2015/10/Why-my-a-tag-can-not-be-clicked.md","shasum":"95a5bead8f737ce9c1eb83bfa97eba4d7bd1954b","modified":1488603761000},{"_id":"source/_posts/2017/03/A-few-notes-about-Promise-in-JavaScript.md","shasum":"2a7838d5c059379c8cedf74ba40fba40109611b3","modified":1488558345000},{"_id":"source/_posts/2017/03/A-simple-timeout-mechanism-for-Promise.md","shasum":"2b166c148b5d417e73d5143cc34ca071860d7245","modified":1488599956000},{"_id":"source/_trash/hello-world.md","shasum":"774b507901d9b17991ace2a70263b6dd6d11999a","modified":1488603291000},{"_id":"source/img/2015/01/leetcode-array.jpg","shasum":"f885c434f38366d299be2f2672c4e48981a79d68","modified":1488514636000},{"_id":"source/img/2015/02/leetcode-stack.png","shasum":"25b12aff5d381d451a855d1a7ee45fb0706ed086","modified":1488514636000},{"_id":"source/img/2015/02/leetcode-string.png","shasum":"242b42275f2944118c44dfabed9b18146f17af03","modified":1488514636000},{"_id":"source/img/2015/02/leetcode-tree.jpg","shasum":"3c5c3c5183ae416797756d9b70dcd4b119f63619","modified":1488514636000},{"_id":"source/img/2015/03/iot-circut_switch.png","shasum":"492dbcb0ab0a155fa50ce9ab0c8792bc18f0cbea","modified":1488514636000},{"_id":"source/img/2015/03/iot-debounce_switch.jpg","shasum":"6d9aaa5ea1bf8c00b170ef70bafdf32dc528d86a","modified":1488514636000},{"_id":"source/img/2015/09/blog-github-repo-create.png","shasum":"445ec1bad5fd1ef78756e4b48299e979b08d62f1","modified":1488514636000},{"_id":"source/img/2015/09/blog-github-repo-name.png","shasum":"5d0c9164ecb89fd500ba56f64ff00a5fa6e9f4a0","modified":1488514636000},{"_id":"source/img/2015/09/blog-github-create-repo-button.png","shasum":"87ff40bf9465634eb27a5fb95a301e8bfdabb893","modified":1488514636000},{"_id":"source/img/2015/09/blog-hexo.png","shasum":"f4227d5040c36734b9fb0d5f57eb1f6669199b87","modified":1488514636000},{"_id":"source/img/2015/09/blog-ssh-key.png","shasum":"dd8616488ff62643cc061ff81ea47896aeae0962","modified":1488514636000},{"_id":"source/img/2015/09/blog-ssh-to-github.png","shasum":"6d4118a19025864826c9416d5b5280373a1f1218","modified":1488514636000},{"_id":"source/img/2015/09/blog-theme-landscape.jpg","shasum":"2931743668ce1a9e74f25d13196e67e573d9ea0a","modified":1488514636000},{"_id":"source/img/2015/10/html-extra-long-line.png","shasum":"4f54f87b0cab99024bd9730fe4a23a89c9dd6ab5","modified":1488514636000},{"_id":"source/img/2015/10/html-position-absolute-z-index.png","shasum":"19f1f11f0e75a20ff3ed3b7b24716aead49b2b48","modified":1488514636000},{"_id":"source/img/2015/10/html-white-space-on-the-right-side-of-page.png","shasum":"ceb95a317f329f1fe24cdbdd86bba4fa769d506d","modified":1488514636000},{"_id":"source/img/2015/10/internet.jpg","shasum":"4fdf98f6065669666abaabff5967d3ddd7c55325","modified":1488514636000},{"_id":"source/img/2015/10/os-linux-shell.png","shasum":"9792ce05b41696ed9ab82fc3452325b9e8dab5a4","modified":1488514636000},{"_id":"source/img/2015/10/tcp-3-way-handshake.jpg","shasum":"192c51667b4ba8fb01f8b101b2940b8c4d7a0c43","modified":1488514636000},{"_id":"source/robots.txt","shasum":"4dceecd04679b7d32140d205a9fb859593928957","modified":1488603291000},{"_id":"themes/hueman/Gruntfile.js","shasum":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1488603291000},{"_id":"themes/hueman/LICENSE","shasum":"3975b7883caeb33f61fada7c0ef4add7ab189849","modified":1488603291000},{"_id":"themes/hueman/README.md","shasum":"cb0615f198b8b322d77452aa9fd2924189995855","modified":1488603291000},{"_id":"themes/hueman/_config.yml","shasum":"81d995f1686baff52e9c24a5d210d58085721d1e","modified":1488603291000},{"_id":"themes/hueman/languages/en.yml","shasum":"81b9367bd0d783faeb9f8abfd389cfe10a313bde","modified":1488603291000},{"_id":"themes/hueman/languages/zh-CN.yml","shasum":"863c1fe2768927a7deaf68b477f6ff52d25b95df","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/after-footer.ejs","shasum":"4c1afa7c23b1c20cbd0445ee2734a78a4e5ac774","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/archive.ejs","shasum":"ab2da9ae6c9e0f2be8afbfb3d09eda1b9704ba95","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/article.ejs","shasum":"b4c7f391c7bbde1a7fe3800b1c79456f22d0f0d6","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/comment.ejs","shasum":"838dce7e316d9533ca48ea04de75473f69f7f1a7","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/footer.ejs","shasum":"3cb98bf93317793924bcb57def506ea939dd6991","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/google-analytics.ejs","shasum":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/head.ejs","shasum":"0949dc1e9a5c921177a1e3d07adfff9335a7f3d4","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/header.ejs","shasum":"bb5686b0682be1092b7601e203a46ed7f3ab96ea","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/post/category.ejs","shasum":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/post/date.ejs","shasum":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/post/gallery.ejs","shasum":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/post/nav.ejs","shasum":"06924597aa5c68f4f1db13c3f719d95ddef1139f","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/post/tag.ejs","shasum":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/post/thumbnail.ejs","shasum":"3333d3ec5fab15a25409cbddb67ae7e4d5f7445d","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/post/title.ejs","shasum":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1488603291000},{"_id":"themes/hueman/layout/_partial/sidebar.ejs","shasum":"c86d055f0d546af47b4f7e74dc37ffd1c3aee36a","modified":1488603291000},{"_id":"themes/hueman/layout/_widget/archive.ejs","shasum":"92fcfd830c011f1ff6e7d95443fe65067d3161f8","modified":1488603291000},{"_id":"themes/hueman/layout/_widget/category.ejs","shasum":"f0bb4be5c625003c0e38312f5079667be3a09ab7","modified":1488603291000},{"_id":"themes/hueman/layout/_widget/links.ejs","shasum":"e24c5bebe3e9f0bbaaf3b44bce8ef5ce56ae348b","modified":1488603291000},{"_id":"themes/hueman/layout/_widget/recent_posts.ejs","shasum":"1c77ce2aa72cc35d6f3c9d9b52d48a378f95a9fa","modified":1488603291000},{"_id":"themes/hueman/layout/_widget/tag.ejs","shasum":"7b35103049fd0480f2631327b9381b7f4c9f5bcb","modified":1488603291000},{"_id":"themes/hueman/layout/_widget/tagcloud.ejs","shasum":"f4ac20c48e4bd6202e263efc9d320de1ad48d608","modified":1488603291000},{"_id":"themes/hueman/layout/archive.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1488603291000},{"_id":"themes/hueman/layout/category.ejs","shasum":"85f2f7e0fdc16c496927511206364304ec364abe","modified":1488603291000},{"_id":"themes/hueman/layout/index.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1488603291000},{"_id":"themes/hueman/layout/layout.ejs","shasum":"b8b73d1fd758b0059027b4bafb6285e514d979b6","modified":1488603291000},{"_id":"themes/hueman/layout/page.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488603291000},{"_id":"themes/hueman/layout/post.ejs","shasum":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1488603291000},{"_id":"themes/hueman/layout/tag.ejs","shasum":"2d86ef0f908b57af4ebf007eb8c6624def84f82a","modified":1488603291000},{"_id":"themes/hueman/package.json","shasum":"47c5adba0477e92e742349bf86f28bfeb701b3c1","modified":1488603291000},{"_id":"themes/hueman/scripts/fancybox.js","shasum":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1488603291000},{"_id":"themes/hueman/source/css/_extend.styl","shasum":"41c5b46a19627571bd592eb4b071e2e279333252","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/archive.styl","shasum":"c611142866096da7c7428d2ef8fd4079a781f57c","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/article.styl","shasum":"2e10e033eb3cd4b66cc68871e0ef5e85e29a1ac4","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/assets.styl","shasum":"7e01b359c28c258b22ca8d64d00f74232359eabe","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/comment.styl","shasum":"2683cecb7d69e23a3fb1e80f10141454fb4cb232","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/footer.styl","shasum":"1345ae77ea03b5660d6362e2f0b221f12aadc5fc","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/header.styl","shasum":"575169eceddd54ef1dec25307a01030ffa81a7ce","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/highlight.styl","shasum":"9332816d92370cff8e252631ef65cb78c53ebb2a","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/nav.styl","shasum":"f1f0821bd04c493b8bd2927f729fa4af160b46a2","modified":1488603291000},{"_id":"themes/hueman/source/css/_partial/sidebar.styl","shasum":"a0623f727a63344830057666565db65a78227ac0","modified":1488603291000},{"_id":"themes/hueman/source/css/_responsive.styl","shasum":"7518d511dee2f0f4da85ff635ff0da20060dc9b8","modified":1488603291000},{"_id":"themes/hueman/source/css/_retina.styl","shasum":"e0445c7caa049250fe3811f55cc82f389009e90f","modified":1488603291000},{"_id":"themes/hueman/source/css/_variables.styl","shasum":"8e3c8990c6b3942376f5956cd6aae8e6b60092be","modified":1488603291000},{"_id":"themes/hueman/source/css/images/logo-header.png","shasum":"a874be8f3e33831614a421d1a74d2c13bd5eba59","modified":1488603291000},{"_id":"themes/hueman/source/css/images/opacity-10.png","shasum":"bbc979866c5b50e8adb348419154b28b1ff44d78","modified":1488603291000},{"_id":"themes/hueman/source/css/images/s-left.png","shasum":"c8cac4f4e3492606fab93196364bd0f87d93bb98","modified":1488603291000},{"_id":"themes/hueman/source/css/images/thumb-default-small.png","shasum":"6d5ff7cd92429f7351fca20cd0d14ba3f2b44b21","modified":1488603291000},{"_id":"themes/hueman/source/css/images/thumb-default-small_bak.png","shasum":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1488603291000},{"_id":"themes/hueman/source/css/images/thumb-default.png","shasum":"2d0ba175d958d342494241c616a74d37f48059fb","modified":1488603291000},{"_id":"themes/hueman/source/css/style.styl","shasum":"e9d5aa16dac7bac32c2ddb6035d6e1f8cd0b4747","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-buttons.js","shasum":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-media.js","shasum":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/helpers/jquery.fancybox-thumbs.js","shasum":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.css","shasum":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.js","shasum":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1488603291000},{"_id":"themes/hueman/source/fancybox/jquery.fancybox.pack.js","shasum":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1488603291000},{"_id":"themes/hueman/source/font-awesome/css/font-awesome.min.css","shasum":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1488603291000},{"_id":"themes/hueman/source/js/html-patch.js","shasum":"f58064e8afcc34e816d8e400dafb850bd064a207","modified":1488603291000},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff2","shasum":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1488603291000},{"_id":"themes/hueman/source/js/script.js","shasum":"5379ee99501d020137e974cc793ff71b41fa5bb7","modified":1488603291000},{"_id":"themes/hueman/source/scrollLoading/images/preloader.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1488603291000},{"_id":"themes/hueman/source/scrollLoading/images/preloader@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1488603291000},{"_id":"themes/hueman/source/scrollLoading/jquery.scrollLoading.js","shasum":"1a3eab1ab2c4644fe1ada921bd1bdb083268a751","modified":1488603291000},{"_id":"themes/hueman/source/scrollLoading/main.js","shasum":"d1e92247f199fa93c7b3672e6b2ad9ad74a0a529","modified":1488603291000},{"_id":"themes/hueman/source/scrollLoading/style.css","shasum":"4ee06b1478b786aed0817b629cf58f336e5eff62","modified":1488603291000},{"_id":"source/img/2015/10/html-anchor-tag.png","shasum":"03451df934022d80450b306a4ad75ceff2c505ab","modified":1488514636000},{"_id":"source/img/favicon.ico","shasum":"880acc94f689513a8df717671bfaa9f750070404","modified":1488603291000},{"_id":"themes/hueman/source/font-awesome/fonts/FontAwesome.otf","shasum":"0112e96f327d413938d37c1693806f468ffdbace","modified":1488603291000},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.eot","shasum":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1488603291000},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.woff","shasum":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1488603291000},{"_id":"source/img/2017/03/promise.png","shasum":"0de19f0dfc844e441c95a9fab495c2bdf623ca12","modified":1488515555000},{"_id":"source/img/2015/09/blog-dnspod.jpg","shasum":"b6f85321757365cfc740896a2ff386781752dacc","modified":1488514636000},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.ttf","shasum":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1488603291000},{"_id":"themes/hueman/source/font-awesome/fonts/fontawesome-webfont.svg","shasum":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1488603291000}],"Category":[{"name":"Coding","_id":"cizus3uwa000129rleswoh24r"},{"name":"Internet","_id":"cizus3uwk000g29rlgqcsh8y3"},{"name":"Languages","_id":"cizus3uws000o29rl7fhlvhey"},{"name":"Operating System","_id":"cizus3uwx000w29rlew9mg61y"},{"name":"Tutorial","_id":"cizus3ux1001329rlzoiocdvk"},{"name":"Internet of Things","_id":"cizus3ux5001b29rlko4vny5n"}],"Data":[],"Page":[],"Post":[{"title":"A simple timeout mechanism for Promise","date":"2017-03-04T02:01:42.000Z","_content":"![](/img/2017/03/promise.png)\n\nSometimes we need to do some asynchronous jobs which may last for a while, like submitting an Ajax POST request. And if there is problem with connection, we may not get response in time as expected. Therefore we need a mechanism to detect timeout so as to avoid endless waiting or even worse situation.\n\nHere is a simple implementation of such mechanism:\n\n```javascript\nconst delayedOperation = function() {\n    const asyncPromise = Promise.resolve()\n            .then(() => {\n                resolve(doStuffAsync());\n            })\n        , delayedPromise = new Promise((resolve, reject) => {\n            setTimeout(() => {\n                console.log('timeout');\n                reject('Timeout');\n            }, 10000);\n        });\n    return Promise.race([openUrlPromise, delayedPromise]);\n};\n\ndelayedOperation()\n.then(console.log)\n.catch(console.log);\n```\n\nBut story does not end here. When running this codes, even though `asyncPromise` does not last for more than 10000 ms, it will still give me a `timeout` console output.\n\nShouldn't the `Promise.race` just return `asyncPromise` and skip `delayedPromise`?\n\nAnswer is YES and NO.\n\nWhen `asyncPromise` is fulfilled ahead of `delayedPromse`, indeed `Promise.race` will return `asyncPromise`, but `delayedPromise` will not just terminate. Instead, because of the `setTimeout()`, `delayedPromise` will be queued on the execution context and waited to complete. So at some point it will still give an output on the console.\n\nThis is not some happy ending we would like see. To remedy this, a simple solution is of course not adding any additional codes except `reject()` inside the `setTimeout()`.\n\nAnother shortcoming for this method is the `setTimeout` will drag the completion of the entire program onward. Therefore you may notice that the memory is not freed even though all operations have completed.","source":"_posts/2017/03/A-simple-timeout-mechanism-for-Promise.md","raw":"title: A simple timeout mechanism for Promise\ncategories:\n  - Coding\ntags:\n  - javascript\n  - promise\ndate: 2017-03-03 21:01:42\n---\n![](/img/2017/03/promise.png)\n\nSometimes we need to do some asynchronous jobs which may last for a while, like submitting an Ajax POST request. And if there is problem with connection, we may not get response in time as expected. Therefore we need a mechanism to detect timeout so as to avoid endless waiting or even worse situation.\n\nHere is a simple implementation of such mechanism:\n\n```javascript\nconst delayedOperation = function() {\n    const asyncPromise = Promise.resolve()\n            .then(() => {\n                resolve(doStuffAsync());\n            })\n        , delayedPromise = new Promise((resolve, reject) => {\n            setTimeout(() => {\n                console.log('timeout');\n                reject('Timeout');\n            }, 10000);\n        });\n    return Promise.race([openUrlPromise, delayedPromise]);\n};\n\ndelayedOperation()\n.then(console.log)\n.catch(console.log);\n```\n\nBut story does not end here. When running this codes, even though `asyncPromise` does not last for more than 10000 ms, it will still give me a `timeout` console output.\n\nShouldn't the `Promise.race` just return `asyncPromise` and skip `delayedPromise`?\n\nAnswer is YES and NO.\n\nWhen `asyncPromise` is fulfilled ahead of `delayedPromse`, indeed `Promise.race` will return `asyncPromise`, but `delayedPromise` will not just terminate. Instead, because of the `setTimeout()`, `delayedPromise` will be queued on the execution context and waited to complete. So at some point it will still give an output on the console.\n\nThis is not some happy ending we would like see. To remedy this, a simple solution is of course not adding any additional codes except `reject()` inside the `setTimeout()`.\n\nAnother shortcoming for this method is the `setTimeout` will drag the completion of the entire program onward. Therefore you may notice that the memory is not freed even though all operations have completed.","slug":"A-simple-timeout-mechanism-for-Promise","published":1,"updated":"2017-03-04T03:59:16.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizus3uw4000029rlkincxi4m"},{"title":"Rejection in Promise","date":"2017-03-03T04:26:06.000Z","_content":"![](/img/2017/03/promise.png)\n\nI am always curious that if a Promise is rejected at any position, will the following then() still be executed? Consider the following codes as an example:\n\n```javascript\nPromise.reject('rejected')\n.then(() => {\n    console.log('before resolve()');\n    return Promise.resolve('resolved');\n})\n.then((msg) => {\n    console.log('resolved inside 1st then()');\n    console.log(`Resolved: ${msg}`);\n}, (msg) => {\n    console.log('rejected inside 1st then()');\n    console.log(`Rejected: ${msg}`);\n})\n.then((msg) => {\n    console.log('resolving inside 2nd then()');\n    console.log(`Resolved: ${msg}`);\n}, (msg) => {\n    console.log('rejecting inside 2nd then()');\n    console.log(`Rejected: ${msg}`);\n})\n.catch((msg) => {\n    console.log('rejected in catch()');\n    console.log(`Rejected: ${msg}`);\n});\n```\n\nResult:\n\n```\nrejected inside 1st then()\nRejected: rejected\nresolving inside 2nd then()\nResolved: undefined\n```\n\nIt is clear that the rejection was caught in the second `then()`, and `Promise.resolve()` was not even executed. But once the rejection is caught in some place, everything went back to normal.\n\nTherefore to ensure that once rejected, the whole process stops running until termination, we should put a `catch()` method at the very end and do not catch the `reject()` inside any `then()` before it.","source":"_posts/2017/03/A-few-notes-about-Promise-in-JavaScript.md","raw":"title: Rejection in Promise\ncategories:\n  - Coding\ntags:\n  - javascript\n  - promise\ndate: 2017-03-02 23:26:06\n---\n![](/img/2017/03/promise.png)\n\nI am always curious that if a Promise is rejected at any position, will the following then() still be executed? Consider the following codes as an example:\n\n```javascript\nPromise.reject('rejected')\n.then(() => {\n    console.log('before resolve()');\n    return Promise.resolve('resolved');\n})\n.then((msg) => {\n    console.log('resolved inside 1st then()');\n    console.log(`Resolved: ${msg}`);\n}, (msg) => {\n    console.log('rejected inside 1st then()');\n    console.log(`Rejected: ${msg}`);\n})\n.then((msg) => {\n    console.log('resolving inside 2nd then()');\n    console.log(`Resolved: ${msg}`);\n}, (msg) => {\n    console.log('rejecting inside 2nd then()');\n    console.log(`Rejected: ${msg}`);\n})\n.catch((msg) => {\n    console.log('rejected in catch()');\n    console.log(`Rejected: ${msg}`);\n});\n```\n\nResult:\n\n```\nrejected inside 1st then()\nRejected: rejected\nresolving inside 2nd then()\nResolved: undefined\n```\n\nIt is clear that the rejection was caught in the second `then()`, and `Promise.resolve()` was not even executed. But once the rejection is caught in some place, everything went back to normal.\n\nTherefore to ensure that once rejected, the whole process stops running until termination, we should put a `catch()` method at the very end and do not catch the `reject()` inside any `then()` before it.","slug":"A-few-notes-about-Promise-in-JavaScript","published":1,"updated":"2017-03-03T16:25:45.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizus3uwe000729rlyuwrh78l"},{"title":"Why my <a> tag can not be clicked","date":"2015-10-19T16:26:15.000Z","_content":"![](/img/2015/10/html-anchor-tag.png)\n\nI wrote some codes below:\n```html\n<body>\n  <div class=\"container\">\n  <a href=\"../index.html\" id=\"return\"><button class=\"btn\">Return</button></a>\n  <h1 id=\"toc_0\">Typography</h1>\n```\n\nWhen I rendered the html, to my surprise, the button was not clickable, neither could I select any text on it.\n![](/img/2015/10/html-position-absolute-z-index.png)\n\nThis is interesting. So I looked back at the css associated with this tag, which wrote as following:\n```css\n#return {\n    position: absolute;\n    right: 0;\n    top: 20px;\n}\n```\n\nI set the position as absolute, and at the same time I set the parent div with position relative, in which way I'd like to make the button floating right. The button is displaying correctly, with correct color and shape. Nothing seemed wrong, except it could not be clicked.\n\nIf I move the `<h1>` tag above the `<a>` tag, the button can be clicked now. So a good guess is that the `<a>` tag was overlapped by `<h1>`, because it appeared before `<h1>` while was positioned in the same block as `<h1>` at the same time. As a result, the `<a>` tag was covered by the `<h1>`.\n\nTo solve this problem, we simply need to add another `z-index` to the css property of `<a>` as following:\n```css\n#return {\n    z-index: 10;\n    position: absolute;\n    right: 0;\n    top: 20px;\n}\n```\n\nNow the button can be clicked and the pages is not messed up as well.\n\nAn answer on [StackOverflow](http://stackoverflow.com/a/10663419) also stated a similar problem.","source":"_posts/2015/10/Why-my-a-tag-can-not-be-clicked.md","raw":"title: 'Why my <a> tag can not be clicked'\ncategories:\n  - Coding\ntags:\n  - html & css\ndate: 2015-10-19 12:26:15\n---\n![](/img/2015/10/html-anchor-tag.png)\n\nI wrote some codes below:\n```html\n<body>\n  <div class=\"container\">\n  <a href=\"../index.html\" id=\"return\"><button class=\"btn\">Return</button></a>\n  <h1 id=\"toc_0\">Typography</h1>\n```\n\nWhen I rendered the html, to my surprise, the button was not clickable, neither could I select any text on it.\n![](/img/2015/10/html-position-absolute-z-index.png)\n\nThis is interesting. So I looked back at the css associated with this tag, which wrote as following:\n```css\n#return {\n    position: absolute;\n    right: 0;\n    top: 20px;\n}\n```\n\nI set the position as absolute, and at the same time I set the parent div with position relative, in which way I'd like to make the button floating right. The button is displaying correctly, with correct color and shape. Nothing seemed wrong, except it could not be clicked.\n\nIf I move the `<h1>` tag above the `<a>` tag, the button can be clicked now. So a good guess is that the `<a>` tag was overlapped by `<h1>`, because it appeared before `<h1>` while was positioned in the same block as `<h1>` at the same time. As a result, the `<a>` tag was covered by the `<h1>`.\n\nTo solve this problem, we simply need to add another `z-index` to the css property of `<a>` as following:\n```css\n#return {\n    z-index: 10;\n    position: absolute;\n    right: 0;\n    top: 20px;\n}\n```\n\nNow the button can be clicked and the pages is not messed up as well.\n\nAn answer on [StackOverflow](http://stackoverflow.com/a/10663419) also stated a similar problem.","slug":"Why-my-a-tag-can-not-be-clicked","published":1,"updated":"2017-03-04T05:02:41.000Z","_id":"cizus3uwh000b29rlby3sfsgq","comments":1,"layout":"post","photos":[],"link":""},{"title":"TCP 3-way Handshake","date":"2015-10-14T01:36:36.000Z","_content":"![](/img/2015/10/internet.jpg)\n\nTCP (Transmission Control Protocol) and UDP (User Datagram Protocol) both work in the transportation layer. TCP is a connection-oriented protocol, while UDP is considered as a connectionless protocol.\n\nThe connection-oriented feature for TCP is represented by the 3-way handshake procedure:\n![](/img/2015/10/tcp-3-way-handshake.jpg)\n\n1. When typing a URL in the web browser, the web browser will translate the request into a packet, with a SYN segment, and send it to the server.\n2. The server receives the packet, and replies with another packet with a SYN-ACK segment (ACK refers to Ackowledge).\n3. The web browser receives the SYN-ACK packet, and replies with a packet with an ACT segment. Hence the handshake completes and connection is built.\n\n\n","source":"_posts/2015/10/TCP-3-way-Handshake.md","raw":"title: TCP 3-way Handshake\ncategories:\n- Internet\ntags:\n- protocols\ndate: 2015-10-13 21:36:36\n---\n![](/img/2015/10/internet.jpg)\n\nTCP (Transmission Control Protocol) and UDP (User Datagram Protocol) both work in the transportation layer. TCP is a connection-oriented protocol, while UDP is considered as a connectionless protocol.\n\nThe connection-oriented feature for TCP is represented by the 3-way handshake procedure:\n![](/img/2015/10/tcp-3-way-handshake.jpg)\n\n1. When typing a URL in the web browser, the web browser will translate the request into a packet, with a SYN segment, and send it to the server.\n2. The server receives the packet, and replies with another packet with a SYN-ACK segment (ACK refers to Ackowledge).\n3. The web browser receives the SYN-ACK packet, and replies with a packet with an ACT segment. Hence the handshake completes and connection is built.\n\n\n","slug":"TCP-3-way-Handshake","published":1,"updated":"2017-03-04T05:02:32.000Z","_id":"cizus3uwj000f29rlsmmf1cgz","comments":1,"layout":"post","photos":[],"link":""},{"title":"Extra white space on my page","date":"2015-10-21T19:17:31.000Z","_content":"I recently created a [new site](http://wangyizhe.net/cheatsheets), collecting some useful cheatsheets. But on the [page](http://wangyizhe.net/cheatsheets/markdown) regarding to topic of Markdown, a funny thing happened without giving me any clue of why. There was some empty space on the right-hand-side of screen.\n\n![](/img/2015/10/html-white-space-on-the-right-side-of-page.png)\n\nIt haunted me for several days. I tried out may possibilities, from screen size of iPhone 6 Plus, to 3-pixels-in-1 Retina Display issue, to viewport settings in meta tag, to disable and re-enable overflow property in css, etc. None of them worked, until I scroll it way down to the bottom and discovered a remarkably long line of code.\n\n![](/img/2015/10/html-extra-long-line.png)\n\nThere is the little devil!!!\n\nAfter changing this part, and refresh the page, the world is in peace...\n\nWhat a stupid mistake! But that's the sort of things humans always do.\n","source":"_posts/2015/10/Extra-white-space-on-my-page.md","raw":"title: Extra white space on my page\ncategories:\n  - Coding\ntags:\n  - html & css\ndate: 2015-10-21 15:17:31\n---\nI recently created a [new site](http://wangyizhe.net/cheatsheets), collecting some useful cheatsheets. But on the [page](http://wangyizhe.net/cheatsheets/markdown) regarding to topic of Markdown, a funny thing happened without giving me any clue of why. There was some empty space on the right-hand-side of screen.\n\n![](/img/2015/10/html-white-space-on-the-right-side-of-page.png)\n\nIt haunted me for several days. I tried out may possibilities, from screen size of iPhone 6 Plus, to 3-pixels-in-1 Retina Display issue, to viewport settings in meta tag, to disable and re-enable overflow property in css, etc. None of them worked, until I scroll it way down to the bottom and discovered a remarkably long line of code.\n\n![](/img/2015/10/html-extra-long-line.png)\n\nThere is the little devil!!!\n\nAfter changing this part, and refresh the page, the world is in peace...\n\nWhat a stupid mistake! But that's the sort of things humans always do.\n","slug":"Extra-white-space-on-my-page","published":1,"updated":"2017-03-04T05:02:22.000Z","_id":"cizus3uwl000k29rlmxhp8mwi","comments":1,"layout":"post","photos":[],"link":""},{"title":"Expression vs. Statement","date":"2015-10-08T19:08:15.000Z","_content":"There are a lot of explanations online for distinguishing those two concepts. As in the answers of [this question](http://stackoverflow.com/questions/4728073/what-is-the-difference-between-an-expression-and-a-statement-in-python) says,\n\n> - **[Expressions](http://docs.python.org/reference/expressions.html)** only contain [identifiers](http://docs.python.org/release/2.5.2/ref/identifiers.html), [literals](http://docs.python.org/release/2.5.2/ref/literals.html) and [operators](http://docs.python.org/release/2.5.2/ref/operators.html), where operators include arithmetic and boolean operators, the function [call operator](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls) `()` the [subscription operator](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription) `[]` and similar, and can be reduced to some kind of \"value\", which can be any Python object.\n> - **Statements** (see [1](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls), [2](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription)), on the other hand, are everything that can make up a line (or several lines) of Python code. Note that expressions are statements as well.\n\nIt is quite confusing to me actually. So I find the simplest way to distinguish those two is that expressions are just a part of statements. An expression represents some operation, but it cannot be executed solely by the compiler.","source":"_posts/2015/10/Expression-vs-Statement.md","raw":"title: Expression vs. Statement\ndate: 2015-10-08 15:08:15\ncategories:\n- Languages\n---\nThere are a lot of explanations online for distinguishing those two concepts. As in the answers of [this question](http://stackoverflow.com/questions/4728073/what-is-the-difference-between-an-expression-and-a-statement-in-python) says,\n\n> - **[Expressions](http://docs.python.org/reference/expressions.html)** only contain [identifiers](http://docs.python.org/release/2.5.2/ref/identifiers.html), [literals](http://docs.python.org/release/2.5.2/ref/literals.html) and [operators](http://docs.python.org/release/2.5.2/ref/operators.html), where operators include arithmetic and boolean operators, the function [call operator](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls) `()` the [subscription operator](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription) `[]` and similar, and can be reduced to some kind of \"value\", which can be any Python object.\n> - **Statements** (see [1](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#calls), [2](https://docs.python.org/3/reference/expressions.html?highlight=subscriptions#grammar-token-subscription)), on the other hand, are everything that can make up a line (or several lines) of Python code. Note that expressions are statements as well.\n\nIt is quite confusing to me actually. So I find the simplest way to distinguish those two is that expressions are just a part of statements. An expression represents some operation, but it cannot be executed solely by the compiler.","slug":"Expression-vs-Statement","published":1,"updated":"2017-03-04T04:54:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizus3uwp000n29rlyzzqrtzw"},{"title":"Create a 2-dimensional Array in JavaScript","date":"2015-10-02T16:59:15.000Z","_content":"When I tried to create a two-dimensional array today, I surprisingly discovered that there is no built-in function which can help us to create two-dimensional array in JavaScript.\n\nI searched online and people suggested several ways to do so.\n\nThe simpliest I've found is to initialize the array with some random numbers:\n```javascript\nvar array = [[1], [1]];\n```\nThen you may alter the array based on your needs. However sometimes the size of the array is fixed, such as question [\"Unique Paths\" on Leetcode](https://leetcode.com/problems/unique-paths/). We need an array of size <i>m</i> x <i>n</i> for dynamic programming. And we need to change the value inside based on index.\n\nIf we used the example above, we would have to make a test if the size of the array is still OK. If yes, append new number in this sub-array; while if no, append a new sub-array, then append number into the new sub-array. It would be a lot of hassle with this method. So there is another way of creating an array with preset size:\n```javascript\nvar array = new Array(m);\n    for (var i = 0; i < m; i++) {\n        array[i] = new Array(n);\n    };\n```","source":"_posts/2015/10/Create-a-2-dimensional-Array-in-JavaScript.md","raw":"title: Create a 2-dimensional Array in JavaScript\ncategories:\n  - Coding\ntags:\n  - javascript\n  - data structure\ndate: 2015-10-02 12:59:15\n---\nWhen I tried to create a two-dimensional array today, I surprisingly discovered that there is no built-in function which can help us to create two-dimensional array in JavaScript.\n\nI searched online and people suggested several ways to do so.\n\nThe simpliest I've found is to initialize the array with some random numbers:\n```javascript\nvar array = [[1], [1]];\n```\nThen you may alter the array based on your needs. However sometimes the size of the array is fixed, such as question [\"Unique Paths\" on Leetcode](https://leetcode.com/problems/unique-paths/). We need an array of size <i>m</i> x <i>n</i> for dynamic programming. And we need to change the value inside based on index.\n\nIf we used the example above, we would have to make a test if the size of the array is still OK. If yes, append new number in this sub-array; while if no, append a new sub-array, then append number into the new sub-array. It would be a lot of hassle with this method. So there is another way of creating an array with preset size:\n```javascript\nvar array = new Array(m);\n    for (var i = 0; i < m; i++) {\n        array[i] = new Array(n);\n    };\n```","slug":"Create-a-2-dimensional-Array-in-JavaScript","published":1,"updated":"2017-03-04T04:54:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizus3uwt000q29rllv39tfp5"},{"title":"About eval in Shell","date":"2015-10-21T02:23:00.000Z","_content":"![](/img/2015/10/os-linux-shell.png)\nThe textbook says in bash scripting, `eval` plays a role that the expression comes after will be evaluated twice before the final execution. By saying evaluation, it means the variables begining with `$` will be translated to whatever its value is.\n\nLet's see some examples.\n\n```bash\n$ a='10'\n$ b=a\n```\nNow b is assigned with `a`, and this `a` is simply a string, not a variable yet.\n\n```bash\n$ echo $a\n10\n$ echo $b\na\n```\n\nNow we execute these two variables in different ways:\n\n```bash\n$ $a\ncommand not found: 10\n$ `$a`\ncommand not found: 10\n$ $($a)\ncommand not found: 10\n$ eval $a\ncommand not found: 10\n$ eval `$a`\ncommand not found: 10\n$ eval $($a)\ncommand not found: 10\n```\n\n```bash\n$ $b\ncommand not found: a\n$ `$b`\ncommand not found: a\n$ $($b)\ncommand not found: a\n$ eval $b\ncommand not found: a\n$ eval `$b`\ncommand not found: a\n$ eval $($b)\ncommand not found: a\n```\nBut if we now evaluate `\\$$b`, as we know `\\` will escape the `$` sign, something interesting will show up.\n\n```bash\n# experiment 1\n$ \\$$b\ncommand not found: $a\n\n# experiment 2\n$ `\\$$b`\ncommand not found: 99361b\n\n# experiment 3\n$ $(\\$$b)\ncommand not found: $a\n\n# experiment 4\n$ eval \\$$b\ncommand not found: 10\n\n# experiment 5\n$ eval `\\$$b`\ncommand not found: 99361b\n\n# experiment 6\n$ eval $(\\$$b)\ncommand not found: $a\n```\nSome conclusions may be drawn from the above experiments:\n\n- Before each execution of command, the known variables in the expression will be converted to its value. As in experiment 1, `\\$$b` is translated to `$a` before executing, then `$a` is executed as if it is a command, and apparently results in a not-found error. Another example would be\n\n\t```bash\n\t$ eval echo \\$$b\n\t10\n\t```\n\tWith `eval`, the entire expression will be evaluated twice. `\\$$b` is translated to `$a` in the first place, then `echo $a` is executed. Similarly, `$a` is translated to `10` before this execution, and `10` is printed on screen as a result.\n\n- There is difference between experiment 1 and 4 is because that `\\$$b` is actually executing `$a` as a command, while `eval \\$$b` will first convert $b into a, then evaluates again from `$a` to `10`. Now `10` is executed as a command.\n\n- <code>\\` \\`</code> and `$()` are called \"command substitution\", which means the expression within will be evaluated and executed before the outside command gets in. The outside command usually is `echo`.\n\t- It is said that <code>\\` \\`</code> and `$()` should be interchangeable, however it apparently is not, judging from experiment 2 and 3.\n\t- From experiment 2 and 3, we could see that `$(\\$$b)` seems to have been successfully translated `\\$$b` into `$a`. But <code>\\`\\\\$$b\\`</code> seems to have first converted `\\$$` into `$$`, which is the process ID of the current shell, then concatenated 'b' at the end and return.\n\t- Therefore a good guess is that <code>\\` \\`</code> grants higher priority to escaped characters than variables when evaluating.\n\t- It is recommended to use `$()` instead of <code>\\` \\`</code> for command substitution.\n\n- Consider another example of using `eval` and `$()`:\n\n\t```bash\n\t$ eval echo \\$$b\n\t10\n\t$ eval $(echo \\$$b)\n\tcommand not found: 10\n\t$ $(echo \\$$b)\n\tcommand not found: $a\n\t```\n\t- `eval echo \\$$b` evaluated `\\$$b` to `$a`, then evaluated `$a` to its value `10` before echoing it out, finally echoed the result.\n\t- `eval $(echo \\$$b)` did the first three steps the same as above, but it has one more step, which was what `$()` did, to execute the result. Therefore you got a not-found error message.\n\t- `$(echo \\$$b)` did the same as the second example, except the double evaluation part. That is, first evaluate `\\$$b` to `$a`, which is associated with \"echo\"; then echoed it out as a string \"$a\"; lastly, ran it as a command, and received a not-found error said \"command '$a' was not found\".","source":"_posts/2015/10/About-eval-in-Shell.md","raw":"title: About eval in Shell\ncategories:\n  - Operating System\ntags:\n  - linux\n  - shell\ndate: 2015-10-20 22:23:00\n---\n![](/img/2015/10/os-linux-shell.png)\nThe textbook says in bash scripting, `eval` plays a role that the expression comes after will be evaluated twice before the final execution. By saying evaluation, it means the variables begining with `$` will be translated to whatever its value is.\n\nLet's see some examples.\n\n```bash\n$ a='10'\n$ b=a\n```\nNow b is assigned with `a`, and this `a` is simply a string, not a variable yet.\n\n```bash\n$ echo $a\n10\n$ echo $b\na\n```\n\nNow we execute these two variables in different ways:\n\n```bash\n$ $a\ncommand not found: 10\n$ `$a`\ncommand not found: 10\n$ $($a)\ncommand not found: 10\n$ eval $a\ncommand not found: 10\n$ eval `$a`\ncommand not found: 10\n$ eval $($a)\ncommand not found: 10\n```\n\n```bash\n$ $b\ncommand not found: a\n$ `$b`\ncommand not found: a\n$ $($b)\ncommand not found: a\n$ eval $b\ncommand not found: a\n$ eval `$b`\ncommand not found: a\n$ eval $($b)\ncommand not found: a\n```\nBut if we now evaluate `\\$$b`, as we know `\\` will escape the `$` sign, something interesting will show up.\n\n```bash\n# experiment 1\n$ \\$$b\ncommand not found: $a\n\n# experiment 2\n$ `\\$$b`\ncommand not found: 99361b\n\n# experiment 3\n$ $(\\$$b)\ncommand not found: $a\n\n# experiment 4\n$ eval \\$$b\ncommand not found: 10\n\n# experiment 5\n$ eval `\\$$b`\ncommand not found: 99361b\n\n# experiment 6\n$ eval $(\\$$b)\ncommand not found: $a\n```\nSome conclusions may be drawn from the above experiments:\n\n- Before each execution of command, the known variables in the expression will be converted to its value. As in experiment 1, `\\$$b` is translated to `$a` before executing, then `$a` is executed as if it is a command, and apparently results in a not-found error. Another example would be\n\n\t```bash\n\t$ eval echo \\$$b\n\t10\n\t```\n\tWith `eval`, the entire expression will be evaluated twice. `\\$$b` is translated to `$a` in the first place, then `echo $a` is executed. Similarly, `$a` is translated to `10` before this execution, and `10` is printed on screen as a result.\n\n- There is difference between experiment 1 and 4 is because that `\\$$b` is actually executing `$a` as a command, while `eval \\$$b` will first convert $b into a, then evaluates again from `$a` to `10`. Now `10` is executed as a command.\n\n- <code>\\` \\`</code> and `$()` are called \"command substitution\", which means the expression within will be evaluated and executed before the outside command gets in. The outside command usually is `echo`.\n\t- It is said that <code>\\` \\`</code> and `$()` should be interchangeable, however it apparently is not, judging from experiment 2 and 3.\n\t- From experiment 2 and 3, we could see that `$(\\$$b)` seems to have been successfully translated `\\$$b` into `$a`. But <code>\\`\\\\$$b\\`</code> seems to have first converted `\\$$` into `$$`, which is the process ID of the current shell, then concatenated 'b' at the end and return.\n\t- Therefore a good guess is that <code>\\` \\`</code> grants higher priority to escaped characters than variables when evaluating.\n\t- It is recommended to use `$()` instead of <code>\\` \\`</code> for command substitution.\n\n- Consider another example of using `eval` and `$()`:\n\n\t```bash\n\t$ eval echo \\$$b\n\t10\n\t$ eval $(echo \\$$b)\n\tcommand not found: 10\n\t$ $(echo \\$$b)\n\tcommand not found: $a\n\t```\n\t- `eval echo \\$$b` evaluated `\\$$b` to `$a`, then evaluated `$a` to its value `10` before echoing it out, finally echoed the result.\n\t- `eval $(echo \\$$b)` did the first three steps the same as above, but it has one more step, which was what `$()` did, to execute the result. Therefore you got a not-found error message.\n\t- `$(echo \\$$b)` did the same as the second example, except the double evaluation part. That is, first evaluate `\\$$b` to `$a`, which is associated with \"echo\"; then echoed it out as a string \"$a\"; lastly, ran it as a command, and received a not-found error said \"command '$a' was not found\".","slug":"About-eval-in-Shell","published":1,"updated":"2017-03-04T05:02:06.000Z","_id":"cizus3uww000v29rlepmdovxn","comments":1,"layout":"post","photos":[],"link":""},{"title":"Build personal blog with Hexo Part 2","date":"2015-09-26T18:18:31.000Z","_content":"![](/img/2015/09/blog-dnspod.jpg)\n\n## <p align=\"center\">Part 2: Deploy to GitHub</p>\n### Configure GitHub\n1. In the upper-right corner of any page, click **+**, and then click **New repository**.\n![](/img/2015/09/blog-github-repo-create.png)\n\n2. Enter name for your blog project, which must be following this pattern: &lt;username&gt;.github.io\n![](/img/2015/09/blog-github-repo-name.png)\n\n3. Click **Create repository**.\n![](/img/2015/09/blog-github-create-repo-button.png)\n\nCongratulations! You've successfully created your blog repository!\n\n### Generate SSH keys\n1. Open terminal\nOpen Git Bash if you are using Windows, or open simply Terminal if you are using Linux or Mac.\n\n2. set your username and email\n```bash\ngit config --global user.name  \"YourName\" \ngit config --global user.email  \"YourEmail@Address\" \n```\n\n3. Generate SSH key\n```bash\nssh-keygen -t rsa -C \"YourEmail@Address\"\n```\n\nThen it will show some lines on the screen\n```bash\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):\n```\nSimply continue. After this, the system will ask for a passphrase. You may leave it blank if you like.\n```\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again:\n```\n\n![](/img/2015/09/blog-ssh-key.png)\n\n4. Add your public key on GitHub\nNow you should have a hidden directory in your home directory named \".ssh\", whichin this hidden directory, two files should be generated with some string similar to \"id_rsa\" and \"id_rsa.pub\". The second one is what we need to copy to GitHub. \n\nSo log in to your account on GitHub, click on the gear-shaped button on the upper-right corner, which will bring you to the setting page. Now find \"SSH Keys\" on the left hand-side menu, and click on \"Add SSH Key\".\n![](/img/2015/09/blog-ssh-to-github.png)\n\nNow open the the \"id_rsa.pub\" file we mentioned before with any text editor you like, copy all the content within, and paste it in the textbox on the webpage. Confirm the change.\n\n5. Test\nEnter the following commands in Terminal:\n```bash\n$ ssh -T git@github.com\n```\nWhen you will see something as below, input \"yes\", and enter.\n```\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n### Settings on Hexo\nYou may find your blog settings in file \"_config.yml\". There are only two places you need to change at this stage:\n1. Title of your blog\nIn the very beginning of this file, you can change the title and subtitle to whatever you like.\n```\n# Site\ntitle: Brainstorm\nsubtitle: Geeks never think alike.\ndescription: Yizhe's blog\nauthor: Yizhe Wang\nlanguage: en\ntimezone:\n```\n2. Deployment settings\nIn the very ending of this file, you need to change the repository_url to the repository you created on GitHub. In my example, it should be \"git@github.com:wangyiz4262/wangyiz4262.github.io.git\". And branch should be master.\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n```\n\nIf you have a domain name of your own, you can bind it to your blog. Please find tutorials online.\n\nNow the deployment is done. Enjoy blogging!","source":"_posts/2015/09/Build-personal-blog-with-Hexo-Part-2.md","raw":"title: Build personal blog with Hexo Part 2\ndate: 2015-09-26 14:18:31\ncategories: \n- Tutorial\ntags: \n- markdown\n---\n![](/img/2015/09/blog-dnspod.jpg)\n\n## <p align=\"center\">Part 2: Deploy to GitHub</p>\n### Configure GitHub\n1. In the upper-right corner of any page, click **+**, and then click **New repository**.\n![](/img/2015/09/blog-github-repo-create.png)\n\n2. Enter name for your blog project, which must be following this pattern: &lt;username&gt;.github.io\n![](/img/2015/09/blog-github-repo-name.png)\n\n3. Click **Create repository**.\n![](/img/2015/09/blog-github-create-repo-button.png)\n\nCongratulations! You've successfully created your blog repository!\n\n### Generate SSH keys\n1. Open terminal\nOpen Git Bash if you are using Windows, or open simply Terminal if you are using Linux or Mac.\n\n2. set your username and email\n```bash\ngit config --global user.name  \"YourName\" \ngit config --global user.email  \"YourEmail@Address\" \n```\n\n3. Generate SSH key\n```bash\nssh-keygen -t rsa -C \"YourEmail@Address\"\n```\n\nThen it will show some lines on the screen\n```bash\nGenerating public/private rsa key pair.\nEnter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):\n```\nSimply continue. After this, the system will ask for a passphrase. You may leave it blank if you like.\n```\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again:\n```\n\n![](/img/2015/09/blog-ssh-key.png)\n\n4. Add your public key on GitHub\nNow you should have a hidden directory in your home directory named \".ssh\", whichin this hidden directory, two files should be generated with some string similar to \"id_rsa\" and \"id_rsa.pub\". The second one is what we need to copy to GitHub. \n\nSo log in to your account on GitHub, click on the gear-shaped button on the upper-right corner, which will bring you to the setting page. Now find \"SSH Keys\" on the left hand-side menu, and click on \"Add SSH Key\".\n![](/img/2015/09/blog-ssh-to-github.png)\n\nNow open the the \"id_rsa.pub\" file we mentioned before with any text editor you like, copy all the content within, and paste it in the textbox on the webpage. Confirm the change.\n\n5. Test\nEnter the following commands in Terminal:\n```bash\n$ ssh -T git@github.com\n```\nWhen you will see something as below, input \"yes\", and enter.\n```\nThe authenticity of host ‘github.com (207.97.227.239)’ can’t be established.\nRSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\nAre you sure you want to continue connecting (yes/no)?\n```\n\n### Settings on Hexo\nYou may find your blog settings in file \"_config.yml\". There are only two places you need to change at this stage:\n1. Title of your blog\nIn the very beginning of this file, you can change the title and subtitle to whatever you like.\n```\n# Site\ntitle: Brainstorm\nsubtitle: Geeks never think alike.\ndescription: Yizhe's blog\nauthor: Yizhe Wang\nlanguage: en\ntimezone:\n```\n2. Deployment settings\nIn the very ending of this file, you need to change the repository_url to the repository you created on GitHub. In my example, it should be \"git@github.com:wangyiz4262/wangyiz4262.github.io.git\". And branch should be master.\n```\ndeploy:\n  type: git\n  message: [message]\n  repo:\n    github: <repository url>,[branch]\n```\n\nIf you have a domain name of your own, you can bind it to your blog. Please find tutorials online.\n\nNow the deployment is done. Enjoy blogging!","slug":"Build-personal-blog-with-Hexo-Part-2","published":1,"updated":"2017-03-04T05:01:55.000Z","_id":"cizus3uwz001229rlpqakjeec","comments":1,"layout":"post","photos":[],"link":""},{"title":"Build personal blog with Hexo Part 1","date":"2015-09-25T19:13:01.000Z","_content":"![](/img/2015/09/blog-hexo.png)\n\n## <p align=\"center\">Part 1: Install Hexo</p>\n### Preface\nBuilding personal blogs has never been easier.\n\nThere are a lot of good choices, free of charge, like blogspot, Sina blog, wordpress.com, etc. But I want something clean, self maintained, without annoying ads. Hmm, seems tougher, but still viable. I need to purchase some VPS space, purchase a domain name, download Wordpress framework from wordpress.org, read a lot of tutorials, and install it. Horray, after days' effort, I am finally on my way! But, I do not feel like writing a single word after all these efforts now...\n\nCan I still have blog totally controlled by myself, without ads, without spending a penny? Yes, here comes [Hexo](https://hexo.io/), an interesting project from a young man in Tainwan.\n\n### Instructions\nIf you follow this tutorial, it should not take you more than a hour to finish the whole process.\n\n#### Basic idea\nThe basic idea of using Hexo for building free blogs is to take advantages of several web-based Git repository hosting service, such as GitHub, Bitbucket, GitCafe, etc. They are not only providing source control services, but also providing a service of hosting webpages as a server.\n\nYou will need to creat a new repository, then push your codes to a specific page branch, and done! For example, if you are using GitHub, you only need to push your front-end codes to the branch \"gh-pages\" of your new repository. The branch name for GitCafe is \"gitcafe-pages\". Technically, you can create unlimited sites with this technique.\n\nThe language for writing Hexo blogs is Markdown. A very intuitive language for text writing. The syntax is quite simple which almost without any burden of studying. A more detailed explanation can be found [here](https://en.wikipedia.org/wiki/Markdown).\n\nThere are also a lot of good tutorials online. [This one](http://www.jianshu.com/p/q81RER), for example, shows the most frequently used syntax you may come across.\n\n#### Install neccessary parts\nThere are two software needs to be install ahead, which are Node.JS and Git:\n1. Download and install Node.JS at official website [here](https://nodejs.org/en/)\n2. Download and install Git at official website [here](https://git-scm.com/downloads)\nYou may find detailed installation instruction on the website above.\n\n#### Install Hexo\nIf you are using Windows, then you will have Git Bash installed when you were installing Git just now. Open it.\nIf you are using Mac or Linux, you can directly open the Terminal app, and enter the following:\n```bash\n$ npm install -g hexo\n```\n\n> <b>Heads up</b>\n> If you see some error like \"-bash: npm: command not found\", then the problem is the directory containing <code>node.exe</code> was not properly added into the environment variables of your operating system. You may refer to tutorial [here](http://www.computerhope.com/issues/ch000549.htm) are how to set the path and environment variables in Windows. For Mac uses, [this post](http://osxdaily.com/2015/07/28/set-enviornment-variables-mac-os-x/) should have explained very clearly. And I believe Linux users should well know how to set system environment variables.\n\n#### Initiate your blog\n\nNow go to any directory you like, say <code>D:\\blog</code>. If you are using Windows, press down Shift key, and right click on empty area, select <code>Open command window here</code> in the pop-up menu. If you are using Mac or Linux, just open Terminal and direct to the directory you specified. Then enter following codes:\n```bash\n$ hexo init\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\nAnd now, you have a preliminary blog set up. You may run following codes to view the result:\n```bash\n$ hexo g\n$ hexo s\n```\n\nYou will see a line of code says \n```bash\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\nThen you only need to open [http://localhost:4000](http://localhost:4000) in your browser, and welcome to your new blog!\n\n![](/img/2015/09/blog-theme-landscape.jpg)\n\nTo Be Continued ...\n","source":"_posts/2015/09/Build-personal-blog-with-Hexo-Part-1.md","raw":"title: Build personal blog with Hexo Part 1\ndate: 2015-09-25 15:13:01\ncategories: \n- Tutorial\ntags: \n- markdown\n---\n![](/img/2015/09/blog-hexo.png)\n\n## <p align=\"center\">Part 1: Install Hexo</p>\n### Preface\nBuilding personal blogs has never been easier.\n\nThere are a lot of good choices, free of charge, like blogspot, Sina blog, wordpress.com, etc. But I want something clean, self maintained, without annoying ads. Hmm, seems tougher, but still viable. I need to purchase some VPS space, purchase a domain name, download Wordpress framework from wordpress.org, read a lot of tutorials, and install it. Horray, after days' effort, I am finally on my way! But, I do not feel like writing a single word after all these efforts now...\n\nCan I still have blog totally controlled by myself, without ads, without spending a penny? Yes, here comes [Hexo](https://hexo.io/), an interesting project from a young man in Tainwan.\n\n### Instructions\nIf you follow this tutorial, it should not take you more than a hour to finish the whole process.\n\n#### Basic idea\nThe basic idea of using Hexo for building free blogs is to take advantages of several web-based Git repository hosting service, such as GitHub, Bitbucket, GitCafe, etc. They are not only providing source control services, but also providing a service of hosting webpages as a server.\n\nYou will need to creat a new repository, then push your codes to a specific page branch, and done! For example, if you are using GitHub, you only need to push your front-end codes to the branch \"gh-pages\" of your new repository. The branch name for GitCafe is \"gitcafe-pages\". Technically, you can create unlimited sites with this technique.\n\nThe language for writing Hexo blogs is Markdown. A very intuitive language for text writing. The syntax is quite simple which almost without any burden of studying. A more detailed explanation can be found [here](https://en.wikipedia.org/wiki/Markdown).\n\nThere are also a lot of good tutorials online. [This one](http://www.jianshu.com/p/q81RER), for example, shows the most frequently used syntax you may come across.\n\n#### Install neccessary parts\nThere are two software needs to be install ahead, which are Node.JS and Git:\n1. Download and install Node.JS at official website [here](https://nodejs.org/en/)\n2. Download and install Git at official website [here](https://git-scm.com/downloads)\nYou may find detailed installation instruction on the website above.\n\n#### Install Hexo\nIf you are using Windows, then you will have Git Bash installed when you were installing Git just now. Open it.\nIf you are using Mac or Linux, you can directly open the Terminal app, and enter the following:\n```bash\n$ npm install -g hexo\n```\n\n> <b>Heads up</b>\n> If you see some error like \"-bash: npm: command not found\", then the problem is the directory containing <code>node.exe</code> was not properly added into the environment variables of your operating system. You may refer to tutorial [here](http://www.computerhope.com/issues/ch000549.htm) are how to set the path and environment variables in Windows. For Mac uses, [this post](http://osxdaily.com/2015/07/28/set-enviornment-variables-mac-os-x/) should have explained very clearly. And I believe Linux users should well know how to set system environment variables.\n\n#### Initiate your blog\n\nNow go to any directory you like, say <code>D:\\blog</code>. If you are using Windows, press down Shift key, and right click on empty area, select <code>Open command window here</code> in the pop-up menu. If you are using Mac or Linux, just open Terminal and direct to the directory you specified. Then enter following codes:\n```bash\n$ hexo init\n$ npm install\n$ npm install hexo-deployer-git --save\n```\n\nAnd now, you have a preliminary blog set up. You may run following codes to view the result:\n```bash\n$ hexo g\n$ hexo s\n```\n\nYou will see a line of code says \n```bash\nINFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\nThen you only need to open [http://localhost:4000](http://localhost:4000) in your browser, and welcome to your new blog!\n\n![](/img/2015/09/blog-theme-landscape.jpg)\n\nTo Be Continued ...\n","slug":"Build-personal-blog-with-Hexo-Part-1","published":1,"updated":"2017-03-04T05:01:44.000Z","_id":"cizus3ux2001729rl8isdva9f","comments":1,"layout":"post","photos":[],"link":""},{"title":"Interfacing an LED and debouncing switch","date":"2015-03-08T04:33:01.000Z","_content":"![](/img/2015/03/iot-debounce_switch.jpg)\n### Setup the circuitry and program for Interfacing an LED and Switch with Raspberry Pi\n\nCircuit Diagram:\n![](/img/2015/03/iot-circut_switch.png)\n\nCode:\n```python\nfrom time import sleep\nimport RPi.GPIO as GPIO\n \nGPIO.setmode(GPIO.BCM)\n \n# Switch Pin\nGPIO.setup(25, GPIO.IN)\n \n# LED Pin\nGPIO.setup(18, GPIO.OUT)\n \nstate = False\n \ndef toggleLED(pin, state):\n    state = not state\n    GPIO.output(pin, state)\n    return state\n \nwhile (True):\n    try:\n        if (GPIO.input(25) == True):\n            state = toggleLED(18, state)\n        sleep(.01)\n    except KeyboardInterrupt:\n        exit()\n```\n\nFindings:\n1. The code given by the book is not compilable, because there is no variable “state” within the scope of function toggleLED, therefore I need to pass-in state as another argument and set the return value to be the updated state.\n2. If I print out the current phase when I press the button, it showed that it had covered several phases on each pressed. This proves that while the button is being pressed down, it sends signals to the Raspberry Pi constantly.\n\n### Debounce the button with better software support or use interrupts\n\nCode:\n```python\nimport RPi.GPIO as GPIO\nfrom time import sleep\n \ndef off(inPin, outPin, status):\n    GPIO.output(outPin, False)\n    status = False\n    while (True):\n        if (GPIO.input(inPin)):\n            return status\n        sleep(0.15)\n \n     \ndef slow(inPin, outPin, status):\n    while (True):\n        status = not status\n        for x in xrange(1,4):\n            GPIO.output(outPin, status)\n            sleep(0.15)\n            if (GPIO.input(inPin)):\n                return status\n \ndef fast(inPin, outPin, status):\n    while (True):\n        status = not status\n        for x in xrange(1,2):\n            GPIO.output(outPin, status)\n            sleep(0.15)\n            if (GPIO.input(inPin)):\n                return status\n \n \nGPIO.setmode(GPIO.BCM)\n \n# Switch Pin\ninputPin = 25\nGPIO.setup(inputPin, GPIO.IN)\n \n# LED Pin\noutputPin = 18\nGPIO.setup(outputPin, GPIO.OUT)\n \nstatus = False\nGPIO.output(outputPin, status)\nwhile (True):\n    try:\n        if (GPIO.input(inputPin)):\n            status = slow(inputPin, outputPin, status)\n            status = fast(inputPin, outputPin, status)\n            status = off(inputPin, outputPin, status)\n             \n        sleep(0.05)\n         \n    except KeyboardInterrupt:\n        GPIO.cleanup()\n        exit()\n```\n\nFindings:\n1. The interval for sleeping is very crucial. If the sleeping time is set to be 0.05 seconds, and when pressing the button, it will jump to the phase after next. For example, the pi is current in slow flashing, and when pressing the button, the pi suddenly stopped flashing or even slow flashing again, which means the fast flashing was skipped. If the sleeping interval is set to be 0.15 seconds, it becomes much better. I guess it is because human motion of pressing button takes some time that crosses two phases.\n2. It is better to have an asynchronous method which can monitor the action of button press. Otherwise, people will need to press the button just when not in sleeping time.","source":"_posts/2015/03/Interfacing-an-LED-and-debouncing-switch.md","raw":"title: Interfacing an LED and debouncing switch\ndate: 2015-03-07 23:33:01\ncategories:\n  - Internet of Things\ntags:\n  - raspberry pi\n  - python\n---\n![](/img/2015/03/iot-debounce_switch.jpg)\n### Setup the circuitry and program for Interfacing an LED and Switch with Raspberry Pi\n\nCircuit Diagram:\n![](/img/2015/03/iot-circut_switch.png)\n\nCode:\n```python\nfrom time import sleep\nimport RPi.GPIO as GPIO\n \nGPIO.setmode(GPIO.BCM)\n \n# Switch Pin\nGPIO.setup(25, GPIO.IN)\n \n# LED Pin\nGPIO.setup(18, GPIO.OUT)\n \nstate = False\n \ndef toggleLED(pin, state):\n    state = not state\n    GPIO.output(pin, state)\n    return state\n \nwhile (True):\n    try:\n        if (GPIO.input(25) == True):\n            state = toggleLED(18, state)\n        sleep(.01)\n    except KeyboardInterrupt:\n        exit()\n```\n\nFindings:\n1. The code given by the book is not compilable, because there is no variable “state” within the scope of function toggleLED, therefore I need to pass-in state as another argument and set the return value to be the updated state.\n2. If I print out the current phase when I press the button, it showed that it had covered several phases on each pressed. This proves that while the button is being pressed down, it sends signals to the Raspberry Pi constantly.\n\n### Debounce the button with better software support or use interrupts\n\nCode:\n```python\nimport RPi.GPIO as GPIO\nfrom time import sleep\n \ndef off(inPin, outPin, status):\n    GPIO.output(outPin, False)\n    status = False\n    while (True):\n        if (GPIO.input(inPin)):\n            return status\n        sleep(0.15)\n \n     \ndef slow(inPin, outPin, status):\n    while (True):\n        status = not status\n        for x in xrange(1,4):\n            GPIO.output(outPin, status)\n            sleep(0.15)\n            if (GPIO.input(inPin)):\n                return status\n \ndef fast(inPin, outPin, status):\n    while (True):\n        status = not status\n        for x in xrange(1,2):\n            GPIO.output(outPin, status)\n            sleep(0.15)\n            if (GPIO.input(inPin)):\n                return status\n \n \nGPIO.setmode(GPIO.BCM)\n \n# Switch Pin\ninputPin = 25\nGPIO.setup(inputPin, GPIO.IN)\n \n# LED Pin\noutputPin = 18\nGPIO.setup(outputPin, GPIO.OUT)\n \nstatus = False\nGPIO.output(outputPin, status)\nwhile (True):\n    try:\n        if (GPIO.input(inputPin)):\n            status = slow(inputPin, outputPin, status)\n            status = fast(inputPin, outputPin, status)\n            status = off(inputPin, outputPin, status)\n             \n        sleep(0.05)\n         \n    except KeyboardInterrupt:\n        GPIO.cleanup()\n        exit()\n```\n\nFindings:\n1. The interval for sleeping is very crucial. If the sleeping time is set to be 0.05 seconds, and when pressing the button, it will jump to the phase after next. For example, the pi is current in slow flashing, and when pressing the button, the pi suddenly stopped flashing or even slow flashing again, which means the fast flashing was skipped. If the sleeping interval is set to be 0.15 seconds, it becomes much better. I guess it is because human motion of pressing button takes some time that crosses two phases.\n2. It is better to have an asynchronous method which can monitor the action of button press. Otherwise, people will need to press the button just when not in sleeping time.","slug":"Interfacing-an-LED-and-debouncing-switch","published":1,"updated":"2017-03-04T05:01:26.000Z","_id":"cizus3ux5001a29rl213i0cc7","comments":1,"layout":"post","photos":[],"link":""},{"title":"Run-Length Encoding algorithm for Strings","date":"2015-02-04T21:52:31.000Z","_content":"![](/img/2015/02/leetcode-string.png)\nImagine we need to compress a string “1111422311” into “4114221321”, which means “four ones, one four, two twos, one three, two ones”. Here is the implementation for this functionality:\n```java\npublic String compress(String str)  {\n    if (str == null || str.length() == 0) {\n        return null;\n    }\n \n    StringBuffer result = new StringBuffer();\n    int stringIndex = 0;\n \n    while (stringIndex < s.length()) {\n        int counter = 0;\n        char digit = s.charAt(stringIndex);\n        while (stringIndex < s.length() && digit == s.charAt(stringIndex)) {\n            counter++;\n            stringIndex++;\n        }\n \n        result.append(counter);\n        result.append(digit);\n    }\n \n    return result.toString();\n}\n```","source":"_posts/2015/02/Run-Length-Encoding-algorithm-for-Strings.md","raw":"title: Run-Length Encoding algorithm for Strings\ndate: 2015-02-04 16:52:31\ncategories:\n- Coding\ntags:\n- leetcode\n- data structure\n---\n![](/img/2015/02/leetcode-string.png)\nImagine we need to compress a string “1111422311” into “4114221321”, which means “four ones, one four, two twos, one three, two ones”. Here is the implementation for this functionality:\n```java\npublic String compress(String str)  {\n    if (str == null || str.length() == 0) {\n        return null;\n    }\n \n    StringBuffer result = new StringBuffer();\n    int stringIndex = 0;\n \n    while (stringIndex < s.length()) {\n        int counter = 0;\n        char digit = s.charAt(stringIndex);\n        while (stringIndex < s.length() && digit == s.charAt(stringIndex)) {\n            counter++;\n            stringIndex++;\n        }\n \n        result.append(counter);\n        result.append(digit);\n    }\n \n    return result.toString();\n}\n```","slug":"Run-Length-Encoding-algorithm-for-Strings","published":1,"updated":"2017-03-04T05:00:59.000Z","_id":"cizus3ux7001h29rlvpgdlpms","comments":1,"layout":"post","photos":[],"link":""},{"title":"Recursion and Stack memory","date":"2015-02-07T22:02:07.000Z","_content":"![](/img/2015/02/leetcode-stack.png)\n\nWhen I was thinking about the problem [Validate Binary Search Tree](https://oj.leetcode.com/problems/validate-binary-search-tree/), my code runs like this:\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    TreeNode previous = null;\n    return helper(root, previous);\n}\n \npublic boolean helper(TreeNode root, TreeNode previous) {\n    if (root == null) {\n        return true;\n    }\n \n    boolean left = helper(root.left, previous);\n    if (previous != null && root.val <= previous.val) {\n        return false;\n    }\n    previous = root;\n    boolean right = helper(root.right, previous);\n \n    return left && right;\n}\n```\n\nThe idea was simple by using BST’s good feature: in-order traversal is in order. So I used a temporary tree node “previous” to record the last visited node on the stack. After comparing the value of previous node and the current node, I changed the previous node to be the current node, and then go to to the next iteration, which might be popping out the left child and returning to its parent, or going to the right child.\n\nThe algorithm should correct? However when testing a tree in the following form, it gave me a result as TRUE.\n\n```\n  1\n /\n1\n```\n\nSo where is the problem?\n\nThe problem comes from the assignment:\n```\nprevious = root;\n```\n\nThe reason is that when using recursion, each time the function calls itself, the program push all the variable on the current stage into a stack on memory, so that when you return back to this stage, everything restores back to their value as last time they were. But when storing objects in Java, what the stack stores is the reference, or the memory address to this object, while the actual data is stored on the heap. So even though you have changed the actual object this variable referring to, as in this case TreeNode previous is assigned to the current root node, when restored to the last stage, the reference of previous changed back the last stage, which might be either the parent node of root, or the right child of root. This is reason why it gives an erroneous result.\n\nTo make this program work, simply change the actual node value of previous instead of changing the reference and it should be fine.\n\n```\nprevious.val = root.val;\n```","source":"_posts/2015/02/Recursion-and-Stack-memory.md","raw":"title: Recursion and Stack memory\ndate: 2015-02-07 17:02:07\ncategories:\n- Coding\ntags:\n- leetcode\n- data structure\n---\n![](/img/2015/02/leetcode-stack.png)\n\nWhen I was thinking about the problem [Validate Binary Search Tree](https://oj.leetcode.com/problems/validate-binary-search-tree/), my code runs like this:\n\n```java\npublic boolean isValidBST(TreeNode root) {\n    TreeNode previous = null;\n    return helper(root, previous);\n}\n \npublic boolean helper(TreeNode root, TreeNode previous) {\n    if (root == null) {\n        return true;\n    }\n \n    boolean left = helper(root.left, previous);\n    if (previous != null && root.val <= previous.val) {\n        return false;\n    }\n    previous = root;\n    boolean right = helper(root.right, previous);\n \n    return left && right;\n}\n```\n\nThe idea was simple by using BST’s good feature: in-order traversal is in order. So I used a temporary tree node “previous” to record the last visited node on the stack. After comparing the value of previous node and the current node, I changed the previous node to be the current node, and then go to to the next iteration, which might be popping out the left child and returning to its parent, or going to the right child.\n\nThe algorithm should correct? However when testing a tree in the following form, it gave me a result as TRUE.\n\n```\n  1\n /\n1\n```\n\nSo where is the problem?\n\nThe problem comes from the assignment:\n```\nprevious = root;\n```\n\nThe reason is that when using recursion, each time the function calls itself, the program push all the variable on the current stage into a stack on memory, so that when you return back to this stage, everything restores back to their value as last time they were. But when storing objects in Java, what the stack stores is the reference, or the memory address to this object, while the actual data is stored on the heap. So even though you have changed the actual object this variable referring to, as in this case TreeNode previous is assigned to the current root node, when restored to the last stage, the reference of previous changed back the last stage, which might be either the parent node of root, or the right child of root. This is reason why it gives an erroneous result.\n\nTo make this program work, simply change the actual node value of previous instead of changing the reference and it should be fine.\n\n```\nprevious.val = root.val;\n```","slug":"Recursion-and-Stack-memory","published":1,"updated":"2017-03-04T05:00:51.000Z","_id":"cizus3uxb001m29rl7ou37ufx","comments":1,"layout":"post","photos":[],"link":""},{"title":"DFS in Binary Tree","date":"2015-02-04T21:58:00.000Z","_content":"![](/img/2015/02/leetcode-tree.jpg)\n\nLet’s think about this problem: [Sum Root to Leaf Numbers](https://oj.leetcode.com/problems/sum-root-to-leaf-numbers/).\n\nA general solution is like below:\n```java\npublic int sumNumbers(TreeNode root) {\n    if (root == null) {\n        return 0;\n    }\n \n    ArrayList<String> numbers = new ArrayList<String>();\n    StringBuffer route = new StringBuffer();\n    helper(root, numbers, route);\n \n    int result = 0;\n    for (String str : numbers) {\n        result += Integer.parseInt(str);\n    }\n \n    return result;\n}\npublic void helper(TreeNode root, ArrayList<String> numbers, StringBuffer route) {\n    if (root == null) {\n        return;\n    }\n \n    if (root.left == null && root.right == null) {\n        route.append(root.val);\n        numbers.add(route.toString());\n        route.deleteCharAt(route.length() - 1);\n        return;\n    }\n \n    route.append(root.val);\n    helper(root.left, numbers, route);\n    helper(root.right, numbers, route);\n    route.deleteCharAt(route.length() - 1);\n}\n```\n\nActually the core part for DFS recursion is the last two calls of helper() method:\n\n```\nhelper(root.left);\nhelper(root.right);\n```\n\nIn this way, we have traverse the tree in pre-order. So this is the essence of DFS for binary trees. Then we just include three other pieces, and we are done with this sort of questions.\n\n1. Checking null for the current node is a routine operation. This means we have reached the bottom of this iteration, either on the left side or the right side, then we return to the previous level of the stack.\n2. Do something about the current node. This is the actually what the problem is asking for. In the example above, we check if we have reached the leaf node. If we do, add the update the preliminary result into the ArrayList. If we need to use backtrack to record the results, don’t forget to remove the last added element from the preliminary result before we continue.\n3. The order of the recursion depends on whether it is pre-order, in-order, or post-order.\n\nA similar problem is: [Path Sum II](https://oj.leetcode.com/problems/path-sum-ii/)\n","source":"_posts/2015/02/DFS-in-Binary-Tree.md","raw":"title: DFS in Binary Tree\ndate: 2015-02-04 16:58:00\ncategories:\n- Coding\ntags:\n- leetcode\n- data structure\n\n---\n![](/img/2015/02/leetcode-tree.jpg)\n\nLet’s think about this problem: [Sum Root to Leaf Numbers](https://oj.leetcode.com/problems/sum-root-to-leaf-numbers/).\n\nA general solution is like below:\n```java\npublic int sumNumbers(TreeNode root) {\n    if (root == null) {\n        return 0;\n    }\n \n    ArrayList<String> numbers = new ArrayList<String>();\n    StringBuffer route = new StringBuffer();\n    helper(root, numbers, route);\n \n    int result = 0;\n    for (String str : numbers) {\n        result += Integer.parseInt(str);\n    }\n \n    return result;\n}\npublic void helper(TreeNode root, ArrayList<String> numbers, StringBuffer route) {\n    if (root == null) {\n        return;\n    }\n \n    if (root.left == null && root.right == null) {\n        route.append(root.val);\n        numbers.add(route.toString());\n        route.deleteCharAt(route.length() - 1);\n        return;\n    }\n \n    route.append(root.val);\n    helper(root.left, numbers, route);\n    helper(root.right, numbers, route);\n    route.deleteCharAt(route.length() - 1);\n}\n```\n\nActually the core part for DFS recursion is the last two calls of helper() method:\n\n```\nhelper(root.left);\nhelper(root.right);\n```\n\nIn this way, we have traverse the tree in pre-order. So this is the essence of DFS for binary trees. Then we just include three other pieces, and we are done with this sort of questions.\n\n1. Checking null for the current node is a routine operation. This means we have reached the bottom of this iteration, either on the left side or the right side, then we return to the previous level of the stack.\n2. Do something about the current node. This is the actually what the problem is asking for. In the example above, we check if we have reached the leaf node. If we do, add the update the preliminary result into the ArrayList. If we need to use backtrack to record the results, don’t forget to remove the last added element from the preliminary result before we continue.\n3. The order of the recursion depends on whether it is pre-order, in-order, or post-order.\n\nA similar problem is: [Path Sum II](https://oj.leetcode.com/problems/path-sum-ii/)\n","slug":"DFS-in-Binary-Tree","published":1,"updated":"2017-03-04T05:00:37.000Z","_id":"cizus3uxe001q29rl7l0r8zfw","comments":1,"layout":"post","photos":[],"link":""},{"title":"Corner cases for binary trees","date":"2015-02-05T21:55:37.000Z","_content":"![](/img/2015/02/leetcode-tree.jpg)\nWhen doing LeetCode problems, some corner cases should be considered when traversing through the tree, otherwise unexpected errors shall appear. Examples:\n[Symmetric Tree](https://oj.leetcode.com/problems/symmetric-tree/)\n[Same Tree](https://oj.leetcode.com/problems/same-tree/)\n\nThe following code takes [Symmetric Tree](https://oj.leetcode.com/problems/symmetric-tree/) as an example:\n```java\npublic void method(TreeNode root) {\n    if (root == null) {\n        return something;\n    }\n \n    // when the node is leaf node\n    if (root.left == null && root.right == null) {\n        return something;\n    }\n \n    // when the node has both children\n    if (root.left != null && root.right != null) {\n        if (root.left.val == root.right.val) {\n            do something;\n        } else {\n            do something;\n        }\n    }\n \n    // when the node is not leaf node yet\n    do something;\n}\n```","source":"_posts/2015/02/Corner-cases-for-binary-trees.md","raw":"title: Corner cases for binary trees\ndate: 2015-02-05 16:55:37\ncategories:\n- Coding\ntags:\n- leetcode\n- data structure\n---\n![](/img/2015/02/leetcode-tree.jpg)\nWhen doing LeetCode problems, some corner cases should be considered when traversing through the tree, otherwise unexpected errors shall appear. Examples:\n[Symmetric Tree](https://oj.leetcode.com/problems/symmetric-tree/)\n[Same Tree](https://oj.leetcode.com/problems/same-tree/)\n\nThe following code takes [Symmetric Tree](https://oj.leetcode.com/problems/symmetric-tree/) as an example:\n```java\npublic void method(TreeNode root) {\n    if (root == null) {\n        return something;\n    }\n \n    // when the node is leaf node\n    if (root.left == null && root.right == null) {\n        return something;\n    }\n \n    // when the node has both children\n    if (root.left != null && root.right != null) {\n        if (root.left.val == root.right.val) {\n            do something;\n        } else {\n            do something;\n        }\n    }\n \n    // when the node is not leaf node yet\n    do something;\n}\n```","slug":"Corner-cases-for-binary-trees","published":1,"updated":"2017-03-04T05:00:24.000Z","_id":"cizus3uxh001u29rlwa49enmx","comments":1,"layout":"post","photos":[],"link":""},{"title":"Breadth-First Traversal with Queue","date":"2015-01-29T21:42:41.000Z","_content":"Breadth-First Traversal can be used in many places, such as traversing level-by-level in a binary tree, or BFS in a graph. All those are implemented with a Queue.\n[Binary Tree Level Order Traversal](https://oj.leetcode.com/problems/binary-tree-level-order-traversal/)\n[Binary Tree Level Order Traversal II](https://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/)\n[Binary Tree Zigzag Level Order Traversal](https://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/)\n[Word Ladder](https://oj.leetcode.com/problems/word-ladder/)\n\nTake binary tree level-by-level traverse for example, we can therefore have this template as a general summary:\n```java\npublic ArrayList<List<Integer>> levelOrder(TreeNode root) {\n    ArrayList<List<Integer>>  result = new ArrayList<ArrayList<Integer>>();\n \n    if (root == null) {\n        return result;\n    }\n \n    Queue<TreeNode> queue = new LinkedList<TreeNode>();\n \n    queue.offer(root);\n \n    while (!queue.isEmpty()) {\n        ArrayList<Integer> visitingRecord = new ArrayList<Integer>();\n        int size = queue.size();\n        for (int i = 0; i < size; i++) {\n            TreeNode node = queue.poll();\n            visitingRecord.add(node.val);\n            if (node.left != null) {\n                queue.offer(node.left);\n            }\n            if (node.right != null) {\n                queue.offer(node.right);\n            }\n        }\n        result.add(visitingRecord);\n    }\n \n    return result;\n}\n```\n\nThere are eight main parts in the template:\n1. Validate the parameter passed in if (root == null).\n2. Create a queue and include the first element into the queue.\n3. Enter a loop based on the emptiness of the queue.\n4. Get the size of the queue, which is actually the ```SIZE OF EACH LAYER```.\n5. Loop through this layer, pop out one element each time, and do some stuff about this element, such as add to a tracing record.\n6. Then add the relevant nodes of this node into the queue.\n7. At the end of iteration of the while loop, do something about this visited layer, such as add to the tracing record.\n8. Return the result","source":"_posts/2015/01/Breadth-First-Traversal-with-Queue.md","raw":"title: Breadth-First Traversal with Queue\ndate: 2015-01-29 16:42:41\ncategories:\n- Coding\ntags:\n- leetcode\n- data structure\n---\nBreadth-First Traversal can be used in many places, such as traversing level-by-level in a binary tree, or BFS in a graph. All those are implemented with a Queue.\n[Binary Tree Level Order Traversal](https://oj.leetcode.com/problems/binary-tree-level-order-traversal/)\n[Binary Tree Level Order Traversal II](https://oj.leetcode.com/problems/binary-tree-level-order-traversal-ii/)\n[Binary Tree Zigzag Level Order Traversal](https://oj.leetcode.com/problems/binary-tree-zigzag-level-order-traversal/)\n[Word Ladder](https://oj.leetcode.com/problems/word-ladder/)\n\nTake binary tree level-by-level traverse for example, we can therefore have this template as a general summary:\n```java\npublic ArrayList<List<Integer>> levelOrder(TreeNode root) {\n    ArrayList<List<Integer>>  result = new ArrayList<ArrayList<Integer>>();\n \n    if (root == null) {\n        return result;\n    }\n \n    Queue<TreeNode> queue = new LinkedList<TreeNode>();\n \n    queue.offer(root);\n \n    while (!queue.isEmpty()) {\n        ArrayList<Integer> visitingRecord = new ArrayList<Integer>();\n        int size = queue.size();\n        for (int i = 0; i < size; i++) {\n            TreeNode node = queue.poll();\n            visitingRecord.add(node.val);\n            if (node.left != null) {\n                queue.offer(node.left);\n            }\n            if (node.right != null) {\n                queue.offer(node.right);\n            }\n        }\n        result.add(visitingRecord);\n    }\n \n    return result;\n}\n```\n\nThere are eight main parts in the template:\n1. Validate the parameter passed in if (root == null).\n2. Create a queue and include the first element into the queue.\n3. Enter a loop based on the emptiness of the queue.\n4. Get the size of the queue, which is actually the ```SIZE OF EACH LAYER```.\n5. Loop through this layer, pop out one element each time, and do some stuff about this element, such as add to a tracing record.\n6. Then add the relevant nodes of this node into the queue.\n7. At the end of iteration of the while loop, do something about this visited layer, such as add to the tracing record.\n8. Return the result","slug":"Breadth-First-Traversal-with-Queue","published":1,"updated":"2017-03-04T04:54:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizus3uxk001y29rluwimja95"},{"title":"Array partition with two pointers","date":"2015-01-28T21:00:06.000Z","_content":"![](/img/2015/01/leetcode-array.jpg)\nSome problem are using this template with minor alternation, such as:\n[Quick Sort](http://examples.javacodegeeks.com/core-java/quicksort-algorithm-in-java-code-example/)\n[Partition Array](http://lintcode.com/en/problem/partition-array)\n[Sort Letters by Case](http://lintcode.com/en/problem/sort-letters-by-case/)\n[Sort Colors](http://lintcode.com/zh-cn/problem/sort-colors/)\n\n```java\npublic int partitionArray(int[] nums, int left, int right, int pivot) {\n    if (nums == null || nums.length == 0) {\n        return 0;\n    }\n \n    if (left <= right || left > 0 || right >= nums.length) {\n        return 0;\n    }\n \n    int leftPointer = left;\n    int rightPointer = right;\n \n    while (leftPointer < rightPointer) {\n        while (nums[leftPointer] < pivot && leftPointer < right) {\n            leftPointer++;\n        }\n        while (nums[rightPointer] >= pivot && rightPointer > left) {\n            rightPointer--;\n        }\n \n        // some condition of this swap\n        swap(nums, leftPointer, rightPointer);\n    }\n    // some condition of this swap\n    swap(nums, leftPointer, rightPointer);\n \n    // decide whether to return the position of this pivot\n    return rightPointer + 1;\n}\n \npublic void swap(int[] nums, int left, int right) {\n    int temp = nums[left];\n    nums[left] = nums[right];\n    nums[right] = temp;\n}\n```\n","source":"_posts/2015/01/Array-partition-with-two-pointers.md","raw":"title: Array partition with two pointers\ndate: 2015-01-28 16:00:06\ncategories: \n- Coding\ntags:\n- leetcode\n- data structure\n---\n![](/img/2015/01/leetcode-array.jpg)\nSome problem are using this template with minor alternation, such as:\n[Quick Sort](http://examples.javacodegeeks.com/core-java/quicksort-algorithm-in-java-code-example/)\n[Partition Array](http://lintcode.com/en/problem/partition-array)\n[Sort Letters by Case](http://lintcode.com/en/problem/sort-letters-by-case/)\n[Sort Colors](http://lintcode.com/zh-cn/problem/sort-colors/)\n\n```java\npublic int partitionArray(int[] nums, int left, int right, int pivot) {\n    if (nums == null || nums.length == 0) {\n        return 0;\n    }\n \n    if (left <= right || left > 0 || right >= nums.length) {\n        return 0;\n    }\n \n    int leftPointer = left;\n    int rightPointer = right;\n \n    while (leftPointer < rightPointer) {\n        while (nums[leftPointer] < pivot && leftPointer < right) {\n            leftPointer++;\n        }\n        while (nums[rightPointer] >= pivot && rightPointer > left) {\n            rightPointer--;\n        }\n \n        // some condition of this swap\n        swap(nums, leftPointer, rightPointer);\n    }\n    // some condition of this swap\n    swap(nums, leftPointer, rightPointer);\n \n    // decide whether to return the position of this pivot\n    return rightPointer + 1;\n}\n \npublic void swap(int[] nums, int left, int right) {\n    int temp = nums[left];\n    nums[left] = nums[right];\n    nums[right] = temp;\n}\n```\n","slug":"Array-partition-with-two-pointers","published":1,"updated":"2017-03-04T05:00:04.000Z","_id":"cizus3uxm002229rlalbzh4cb","comments":1,"layout":"post","photos":[],"link":""}],"PostAsset":[],"PostCategory":[{"post_id":"cizus3uw4000029rlkincxi4m","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus3uwc000429rln9c9zld5"},{"post_id":"cizus3uwe000729rlyuwrh78l","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus3uwg000829rl8srqwc8k"},{"post_id":"cizus3uwp000n29rlyzzqrtzw","category_id":"cizus3uws000o29rl7fhlvhey","_id":"cizus3uws000p29rl7btw61a2"},{"post_id":"cizus3uwt000q29rllv39tfp5","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus3uwu000r29rlzvng0hpp"},{"post_id":"cizus3uxk001y29rluwimja95","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus3uxl001z29rln07o36sz"},{"post_id":"cizus3uxm002229rlalbzh4cb","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus5h3r002629rl7a1f02a3"},{"post_id":"cizus3uxh001u29rlwa49enmx","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus5wlp002729rlm9p8gs15"},{"post_id":"cizus3uxe001q29rl7l0r8zfw","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus65s4002829rldjx4axd9"},{"post_id":"cizus3uxb001m29rl7ou37ufx","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus6gng002929rlddq4d1q9"},{"post_id":"cizus3ux7001h29rlvpgdlpms","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus6ms6002a29rlgkuqimie"},{"post_id":"cizus3ux5001a29rl213i0cc7","category_id":"cizus3ux5001b29rlko4vny5n","_id":"cizus77lm002c29rlm99gptj4"},{"post_id":"cizus3ux2001729rl8isdva9f","category_id":"cizus3ux1001329rlzoiocdvk","_id":"cizus7lj1002e29rl73xz49ei"},{"post_id":"cizus3uwz001229rlpqakjeec","category_id":"cizus3ux1001329rlzoiocdvk","_id":"cizus7ujo002f29rlyibcmtqt"},{"post_id":"cizus3uww000v29rlepmdovxn","category_id":"cizus3uwx000w29rlew9mg61y","_id":"cizus82qt002g29rl7bexmqxx"},{"post_id":"cizus3uwl000k29rlmxhp8mwi","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus8eo1002h29rl9fxs157b"},{"post_id":"cizus3uwj000f29rlsmmf1cgz","category_id":"cizus3uwk000g29rlgqcsh8y3","_id":"cizus8min002i29rlb5dm1o3v"},{"post_id":"cizus3uwh000b29rlby3sfsgq","category_id":"cizus3uwa000129rleswoh24r","_id":"cizus8tyh002j29rlrwlpvuhv"}],"PostTag":[{"post_id":"cizus3uw4000029rlkincxi4m","tag_id":"cizus3uwa000229rlg4f2oroz","_id":"cizus3uwd000529rl1ii67773"},{"post_id":"cizus3uw4000029rlkincxi4m","tag_id":"cizus3uwc000329rlbggznvlo","_id":"cizus3uwd000629rlwhxkq3dv"},{"post_id":"cizus3uwe000729rlyuwrh78l","tag_id":"cizus3uwa000229rlg4f2oroz","_id":"cizus3uwg000929rlvyoonagx"},{"post_id":"cizus3uwe000729rlyuwrh78l","tag_id":"cizus3uwc000329rlbggznvlo","_id":"cizus3uwg000a29rllkeu4h09"},{"post_id":"cizus3uwh000b29rlby3sfsgq","tag_id":"cizus3uwh000d29rl8prn3ywx","_id":"cizus3uwi000e29rlmhgnhzo5"},{"post_id":"cizus3uwj000f29rlsmmf1cgz","tag_id":"cizus3uwk000h29rlfeysgiw6","_id":"cizus3uwk000i29rly7jkq0ii"},{"post_id":"cizus3uwl000k29rlmxhp8mwi","tag_id":"cizus3uwh000d29rl8prn3ywx","_id":"cizus3uwm000m29rl2zyvxzpx"},{"post_id":"cizus3uwt000q29rllv39tfp5","tag_id":"cizus3uwa000229rlg4f2oroz","_id":"cizus3uwv000t29rl8b9vk1ii"},{"post_id":"cizus3uwt000q29rllv39tfp5","tag_id":"cizus3uwu000s29rlxh4a3syx","_id":"cizus3uwv000u29rlagnov2ml"},{"post_id":"cizus3uww000v29rlepmdovxn","tag_id":"cizus3uwx000x29rl22609eg7","_id":"cizus3uwy001029rl514unpg9"},{"post_id":"cizus3uww000v29rlepmdovxn","tag_id":"cizus3uwx000y29rlyxc2crll","_id":"cizus3uwy001129rl84ccqp6z"},{"post_id":"cizus3uwz001229rlpqakjeec","tag_id":"cizus3ux1001429rl4os4x603","_id":"cizus3ux1001529rlgcrel79x"},{"post_id":"cizus3ux2001729rl8isdva9f","tag_id":"cizus3ux1001429rl4os4x603","_id":"cizus3ux3001929rlfx8d1xg3"},{"post_id":"cizus3ux5001a29rl213i0cc7","tag_id":"cizus3ux5001c29rlux086plu","_id":"cizus3ux6001f29rlknhpkn3i"},{"post_id":"cizus3ux5001a29rl213i0cc7","tag_id":"cizus3ux6001d29rloomzusgz","_id":"cizus3ux6001g29rlk6fegh6m"},{"post_id":"cizus3ux7001h29rlvpgdlpms","tag_id":"cizus3ux9001j29rld7z0uadd","_id":"cizus3ux9001k29rldp0etd3q"},{"post_id":"cizus3ux7001h29rlvpgdlpms","tag_id":"cizus3uwu000s29rlxh4a3syx","_id":"cizus3ux9001l29rlen9ryewi"},{"post_id":"cizus3uxb001m29rl7ou37ufx","tag_id":"cizus3ux9001j29rld7z0uadd","_id":"cizus3uxd001o29rlf8xw9zzo"},{"post_id":"cizus3uxb001m29rl7ou37ufx","tag_id":"cizus3uwu000s29rlxh4a3syx","_id":"cizus3uxd001p29rlnkbijtgf"},{"post_id":"cizus3uxe001q29rl7l0r8zfw","tag_id":"cizus3ux9001j29rld7z0uadd","_id":"cizus3uxg001s29rle91yczgq"},{"post_id":"cizus3uxe001q29rl7l0r8zfw","tag_id":"cizus3uwu000s29rlxh4a3syx","_id":"cizus3uxg001t29rlxyh3usad"},{"post_id":"cizus3uxh001u29rlwa49enmx","tag_id":"cizus3ux9001j29rld7z0uadd","_id":"cizus3uxj001w29rl2kz4ov8e"},{"post_id":"cizus3uxh001u29rlwa49enmx","tag_id":"cizus3uwu000s29rlxh4a3syx","_id":"cizus3uxj001x29rlf8vtsp5k"},{"post_id":"cizus3uxk001y29rluwimja95","tag_id":"cizus3ux9001j29rld7z0uadd","_id":"cizus3uxm002029rlxfo5aleu"},{"post_id":"cizus3uxk001y29rluwimja95","tag_id":"cizus3uwu000s29rlxh4a3syx","_id":"cizus3uxm002129rl83r5wffy"},{"post_id":"cizus3uxm002229rlalbzh4cb","tag_id":"cizus3ux9001j29rld7z0uadd","_id":"cizus3uxn002429rlj9c0g8ia"},{"post_id":"cizus3uxm002229rlalbzh4cb","tag_id":"cizus3uwu000s29rlxh4a3syx","_id":"cizus3uxn002529rle1moywps"}],"Tag":[{"name":"javascript","_id":"cizus3uwa000229rlg4f2oroz"},{"name":"promise","_id":"cizus3uwc000329rlbggznvlo"},{"name":"html & css","_id":"cizus3uwh000d29rl8prn3ywx"},{"name":"protocols","_id":"cizus3uwk000h29rlfeysgiw6"},{"name":"data structure","_id":"cizus3uwu000s29rlxh4a3syx"},{"name":"linux","_id":"cizus3uwx000x29rl22609eg7"},{"name":"shell","_id":"cizus3uwx000y29rlyxc2crll"},{"name":"markdown","_id":"cizus3ux1001429rl4os4x603"},{"name":"raspberry pi","_id":"cizus3ux5001c29rlux086plu"},{"name":"python","_id":"cizus3ux6001d29rloomzusgz"},{"name":"leetcode","_id":"cizus3ux9001j29rld7z0uadd"}]}}